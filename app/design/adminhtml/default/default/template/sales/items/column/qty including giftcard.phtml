<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
 
    /**
     * Get the resource model
     */
    $resource = Mage::getSingleton('core/resource');
     
    /**
     * Retrieve the read connection
     */
    $readConnection = $resource->getConnection('core_read');
 
    /**
     * Retrieve our table name
     */
    $table = $resource->getTableName('sales_flat_order_item');
     
    
?>
<?php if ($_item = $this->getItem()): ?>
<table cellspacing="0" class="qty-table">
    <tr>
        <td><?php echo Mage::helper('sales')->__('Ordered') ?></td>
        <td><strong><?php echo $_item->getQtyOrdered()*1 ?></strong></td>
        
    </tr>
    <?php if ((float) $_item->getQtyInvoiced()): ?>
    <tr>
        <td><?php echo Mage::helper('sales')->__('Invoiced') ?></td>
        <td><strong><?php echo $_item->getQtyInvoiced()*1 ?></strong></td>
    </tr>
    <?php endif; ?>
    <?php if ((float) $_item->getQtyShipped()): ?>
    <tr>
        <td><?php echo Mage::helper('sales')->__('Shipped') ?></td>
        <td><strong><?php echo $_item->getQtyShipped()*1 ?></strong></td>
    </tr>
    <?php endif; ?>
    <?php if ((float) $_item->getQtyRefunded()): ?>
    <tr>
        <td><?php echo Mage::helper('sales')->__('Refunded') ?></td>
        <td><strong><?php echo $_item->getQtyRefunded()*1 ?></strong></td>
    </tr>
    <?php endif; ?>
    <?php if ((float) $_item->getQtyCanceled()): ?>
    <tr>
        <td><?php echo Mage::helper('sales')->__('Canceled') ?></td>
        <td><strong><?php echo $_item->getQtyCanceled()*1 ?></strong></td>
    </tr>
    <?php endif; ?>
	<?php 
	
	
   
    $query = 'SELECT product_type, qty_backordered FROM ' . $table . ' WHERE order_id = ' . (int)$_item->getOrderId() . ' AND parent_item_id = '.(int)$_item->getItemId()  . ' AND qty_backordered is not NULL ' ;
    $queryforgiftcard = "SELECT qty_backordered FROM " . $table . " WHERE order_id = " . (int)$_item->getOrderId() . " AND product_type = 'giftcards' AND qty_backordered is not NULL " ;
     
    /**
     * Execute the query and store the result in $sku
     */
    $backordered = $readConnection->fetchAll($query);
    $backordered_giftcard = $readConnection->fetchOne($queryforgiftcard);
    //print_r($backordered_giftcard); 
     $backorderedint = $backordered[0]['qty_backordered']; 
     
	?>
	<?php if ($backordered[0]['product_type'] == 'simple'): ?>
    <tr>
        <td><?php echo Mage::helper('sales')->__('PreOrdered') ?></td>
        <td><strong><?php echo (int) $backorderedint  ?></strong></td>
    </tr>
    <?php elseif ($backordered_giftcard > 0 ): ?>
	 <tr>
        <td><?php echo Mage::helper('sales')->__('PreOrdered') ?></td>
        <td><strong><?php echo (int) $backordered_giftcard  ?></strong></td>
    </tr>

	<?php endif; ?>
	
	
	
</table>
<?php endif; ?>
